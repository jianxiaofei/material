
常用、实用、易忘知识点：
1. replace(/[^(\d)|(,)]/g, "") -->除去不是数字和英文逗号的输入；
2. replace(/[^\d+]$/ig,"") -->提取字符串中的数字部分；








--------调研cesium.js------------
http://www.cnblogs.com/laixiangran/p/4985403.html（开发实践）
http://api.rivermap.cn/cesium/rivermap/map.html(cesium实例)
-介绍：
    --Cesium使用Bing地图基于JS编写的使用WebGL（3D绘图协议）的地图引擎。
    --是一个高精确度、高清晰度的地图视觉效果。
    --动态地理空间可视化
    --非常高的性能和精准度
-能做些什么：
    --渲染3D地球、2D区域地图、多种GIS(地理信息系统)要素
    --适合动态数据在GIS图层上的展示
    --可以自行绘制图形，高亮区域和自定义图形
    --提供良好的触摸支持
    --交通基础设施建模仿真优化
-如何使用：
    -配置运行环境，需要Node.js、npm环境
-


--->AngularJS<---
->AngularJS 官网练习

安装
构建环境
识别安装文件用途
构建应用
    -表达式
    -ES2015模板
    -数据双向绑定
    -主从结构
    -ngFor
    -ngIf
    -class绑定
    -数据可选操作函数
    -多组件使用
    -共享服务
    -生命周期钩子：OnInit
    -路由
    -http

/**************正式学习Angular****************/
（一）、官网初步了解
->架构
    -概览：Ag是用html、js构建客户端应用。
    -包括库：核心库、可选库。
    -如何构建应用：用扩展语法写html模板、用组件类管理模板、用服务添加逻辑、用模块打包发布组件与服务、用引导模块启动该应用。

->模板与数据绑定
    -显示数据
        --使用插值表达式显示组件
            -内联模板
            -模板文件
            -变量赋值
            -构造函数
            -使用ngFor显示数组属性
            -为数据创建一个类
            -使用这个类
            -通过NgIf进行条件显示


    -模板语法
        --插值表达式：{{...}}
        --模板表达式：
        --表达式上下文：
        --模板语句
        --语句上下文
        --绑定语法
    -生命周期钩子
        --练习
            ---
    -组件之间的交互
    -组件样式

（二）、书籍angular权威教程
    -构建第一个应用
        --……
        --ng new App
        --导入依赖: import
        --Component 注解：@Component
        --用templateUrl 添加模板
        --添加template：``
        --用styleUrls 添加CSS样式：[]
        --加载组件：
        --把数据添加到组件中
        --渲染模板：{{}}
        --使用数组
        --使用UserItemComponent组件
    -用angular仿reddit web 应用
        --done!
    -TypeScript
        --Angular是用TypeScript构建的.TypeScript>ES6>ES5
        --TypeScript特性
            ---类型(eg:var name:string)
                ----有助于代码的编写
                ----有助于代码的阅读
                ----内置类型
                    -----字符串
                    -----数字（都是浮点型）
                    -----布尔类型
                    -----数组
                    -----枚举
                    -----任意类型（即若没有指定类型，那它的默认类型就是any。）
                    -----无类型（不希望哪里有类型。它通常用作函数的返回值，表示没有任何返回值）
            ---类
                ----属性
                ----方法
                ----构造函数
                ----继承
            ---工具
                ----胖箭头函数语法
                ----模板字符串
            ---注解
            ---模块导入
            ---语言工具包（eg:结构）
        --Angular的工作原理
            ---应用
            ---数据模型
            ---组件
        --内置指令
        --
        --
        --
        --
        --
        --
        --
        --
        --
        --
        --
        --
        --
        --











AngularJS初识

    -什么是AngularJS：专门为应用程序设计的HTML、使得开发现代的单一页面应用程序变得更加容易。
        --特点
            ---AngularJS把应用程序数据绑定到html元素。
            ---AngularJS可以克隆和重复HTML元素。
            ---AngularJS可以隐藏和显示HTML元素。
            ---AngularJS可以在html元素“背后”添加代码。
            ---AngularJS支持输入验证。
    -AngularJS是一个JavaScript框架
    -AngularJS扩展了HTML
    -AngularJS指令
        --以ng为前缀
        --ng-init指令初始化AngularJS应用程序
    -实例
    -表达式
        --表达式写在双大括号内：{{expression}}。
        --将数据绑定到html。
        --在表达式书写位置“输出”数据。
        --可以是文字、运算符、变量。
    -应用
        --AngularJS模块(Module)定义了AngularJS应用。
        --控制器(Controller)用于控制AngularJS应用。
        --ng-app指令定义了应用，ng-controller定义了控制器。
    -模块
    -控制器

AngularJS表达式

    -数字
        --实例
    -对象
        --实例
    -数组
        --实例
    -与JavaScript比较
        --都可以包含字母、操作符、变量
        --AngularJS表达式写在html中。
        --AngularJS表达式不支持条件判断，循环以及异常。
        --AngularJS表达式支持过滤器。

AngularJS指令
    -描述
        --扩展了html属性，带有前缀ng-。
        --ng-app初始化一个AngularJS应用程序。
        --ng-init指令初始化应用程序数据。
        --ng-model把元素版元素值（比如输入域的值）绑定到应用程序。
    -数据绑定
        --ng-model
        --实例    
    -重复HTML元素
        --ng-repeat
        --实例
    -ng-app
    -ng-init
    -ng-model
    -ng-repeat

AngularJS控制器
    -描述
        --AngularJS应用程序被控制器控制。
        --ng-controller
        --此控制器是JavaScript对象，由由标准的JavaScript对象的构造函数 创建。
    -实例
    -控制器方法                   
    -外部文件中的控制器   

AngularJS Filters
    -currency: 格式化数字为货币格式。 
    -Filter：从数组中选择一个子集。
    -lowercase：格式化字符串为小写。
    -orderBy：根据某个表达式排列数组。
    -uppercase：格式化字符串为大写。
    -表达式中添加过滤器
        --管道字符 |
        --向指令中添加过滤器 

AngularJS XMLHttpRequest
    -读取JSON文件(失败)。。。手册网终止练习






















-|--|--|--|--|-
-|-         -|-
-|---分割线--|-
-|-         -|-
-|--|--|--|--|-



--->Node.js<---

安装

创建第一个应用hello world!
    -引入required模块
    -创建服务器
        -createServer

NPM (Node Package Manager)使用
    -npm命令安装模块
    -全局安装与本地安装
    -使用package.json
    -卸载模块
    -更新模块
    -搜索模块
    -创建模块
    -使用淘宝npm镜像
    -npm常用命令
        -install、public、help、update、cache clear、unpublic

Node.js REPL(交互式解释器)-nodejs自带了交互式解释器
    -可以实现
        --读取
        --执行
        --打印
        --循环
    -简单表达式运算
    -使用变量
    -多行表达式
    -下划线（_）变量
    -REPL命令
        --ctrl+c 退出当前终端
        --ctrl+c 两次退出Node REPL
        --ctrl+d 退出 Node REPL
        --向上/向下键 查看历史命令
        --tab 列出当前命令
        --.help 列出使用命令
        --.break 退出多行表达式
        --.clear 退出多行表示式
        --.save filename 保存当前Node REPL 会话到指定文件
        --.load filename 载入当前Node REPL 会话的文件内容

Node.js 回调函数
    -阻塞代码实例
    -非阻塞代码实例

Node.js 事件循环
    -事件驱动程序
        --实例
    -Node 应用程序是如何工作的-在Node应用程序中，执行异步操作的函数将回调函数作为最后一个参数，回调函数接受错误对象作为第一个参数。
        --实例

Node.js EventEmitter
    -EventEmitter类-events模块只提供了一个对象：events.EventEmitter.EventEmitter的核心就是事件触发与事件监听器功能的封装。
        --实例

    -方法
        --addListener(event, listener): 为指定事件添加一个监听器到监听器数组的尾部。
        --on(event, listener): 为指定事件注册一个监听器，接受一个字符串event和一个回调函数。
        --once(event, listener)：为指定事件注册一个单次监听器，即监听器最多只会触发一次，触发后立刻解除该监听器。
        --removeListener(event, listener)：移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。
        --removellListeners([event])：移除所有事件的所有监听器，如果指定事件，则移除指定事件的所有监听器。
        --setMaxListener(n)：默认情况下，EventEmitters如果你添加的监听器超过10个就会警告信息。setMaxListeners函数用于提高监听器的默认限制的数量。
        --listeners(event)：返回指定事件的监听数组。
        --emit(event, [arg1],[arg2],[...])：按参数的顺序执行每个监听器，如果事件有注册监听返回true，否则返回false。

    -类方法
        --listenerCount(emitter, event)-返回指定事件的监听器数量。

    -事件
        --newListener
        --removeListener

    -eg：EventEmitter类的应用。

    -error 事件
        -
    -继承EventEmitter
        -

Node.js Buffer(缓冲区)：专门用来创建一个存放二进制数据的缓存区。
    -创建 Buffer类
        --方法1
        --方法2
        --方法3
    -写入缓存区
        --语法
        --参数
            ---string
            ---offset
            ---length
            ---encoding
        --返回值
        --实例
    -从缓冲区读取数据
        --语法
        --参数
            ---encoding
            ---start
            ---end
        返回值
        实例
    -将Buffer转换为JSON对象
        --语法
        --返回值
        --实例
    -缓冲区合并
        --语法
        --参数
            ---list
            ---totalLength
        --返回值
        --实例
    -缓冲区比较
        --语法
        --参数
            --otherBuffer
        返回值
        实例
    -拷贝缓冲区
        --语法
        --参数
            ---targetBuffer
            ---targetStart
            ---sourceStart
            ---sourceEnd
        --返回值
        --实例
    -缓冲区裁剪
        --语法
        --参数
            ---start
            ---end
        --返回值
        --实例
    -缓冲区长度
        --语法
        --返回值
        --实例

Node.js Stream(流-有四种流类型)
    -Readable：可读操作
    -Writable：可写操作
    -Duplex：可读可写操作
    -Transform：操作被写入数据，然后读出结果。
    -常用的事件
        --data：当有数据可读时触发。
        --end：没有更多的数据可读时触发
        --error：在接收和写入过程中发生错误时触发。
        --finish：所有数据已被写入到底层系统时触发。
    -从流中读取数据
        --实例
    -写入流
        --实例
    -管道流
        --实例
    -链式流
        --压缩文件
            ---实例
        --解压文件
            ---实例

Node.js 模块系统
    -创建模块
    -服务器端的模块放在哪里
    -从文件模块缓存中加载
    -从原生模块加载
    -从文件加载

Node.js 函数
    -匿名函数
    -函数传递是如何让HTTP服务器工作的

Node.js 路由(不明白，没懂)

Node.js 全局对象
    -全局对象与全局变量：在嘴歪层定义的变量、全局对象的属性、隐式定义的变量
        --__filename：当前正在执行的脚本的文件名。
            ---实例
        --setTimeout(cb,ms)：指定毫秒执行一次指定函数
            ---实例
        --clearTimeout(t)：停止一个之前通过setTimeout()创建的定时器。
            ---实例
        --setInterval(cb,ms)：指定的毫秒循环执行指定函数。
            ---实例
        --console：
            ---方法
                ----console.log()
                ----console.info()
                ----console.error()
                ----console.warn()
                ----console.dir()
                ----console.time()
                ----console.timeEnd()
                ----console.trace()
                ----console.assert()
        --process：描述当前进程状态的对象，提供了一个与操作系统的简单接口。
            ---exit：当前进程准备退出时触发。
            ---beforeExit：当node情况事件循环，并且没有其他安排时触发这个事件。
            ---uncaughtException：当一个异常冒泡回到事件循环，触发这个事件。
            ---Signal事件：当进程接收到信号时触发。
            ---实例
        --退出状态码
        --Process 属性
            ---stdout
            ---stderr
            ---stdin
            ---argv
            ---execPath
            ---execArgv
            ---env
            ---exitCode
            ---version
            ---versions
            ---config
            ---pid
            ---title
            ---arch
            ---platform
            ---mainModule
            ---实例
        --process 方法：手册

Node.js常用工具
    -util.inherits：实现对象间原型继承的函数。
    -util.inspect：是一个将任意对象转换为字符串的方法，通常用于调试和错误输出。
    -util.isArray(object)
    -util.isRegExp(object)
    -util.isError(object)

Node.js 文件系统
    -异步和同步
    -打开文件
        --语法：fs.open(path, flags[, mode], callback)
        --参数
            ---path
            ---flags
                ----r
                ----r+
                ----rs
                ----rs+
                ----w
                ----wx
                ----w+
                ----wx+
                ----a
                ----ax
                ----a+
                ----ax+
            ---mode
            ---callback
    -获取文件信息
        ---语法：fs.start(path,callback);
        ---参数
            ----path
            ----callback
        ---方法
            ----stats.isFile()
            ----stats.isDirectory()
            ----stats.isBlockDevice()
            ----stats.isCharacterDevice()
            ----stats.isSymbolicLink()
            ----stats.isFIFO()
            ----stats.isSocket()
        ---实例
    -写入文件
        --语法：fs.writeFile(filename, data[, options], callback)
        --参数
            ---path
            ---data
            ---options
            ---callback
        --实例
    -读取文件
        --语法：fs.read(fd, buffer, offset, length, position, callback)
        --参数
            ---fd - 通过fs.open() 方法返回的文静啊描述符。
            ---buffer
            ---offset
            ---length
            ---position
            ---callback
        --实例
    -关闭文件
        --语法：fs.close(fd, callback)
        --参数
            ---fd
            ---callback
        --实例
    -截取文件
        --语法：fs.ftruncate(fd, len, callback)
        --参数
            ---fd
            ---len
            ---callback
        --实例
    -删除文件
        --语法：fs.unlink(path, callback)
        --参数
            ---path
            ---callback
        --实例
    -创建目录
        --语法：fs.mkdir(path[, mode], callback)
        --参数
            ---path
            ---mode
            ---callback
        --实例
    -读取目录
        --语法：fs.readdir(path, callback)
        --参数
            ---path
            ---callback
        --实例
    -删除目录
        --语法：fs.rmdir(path, callback)
        --参数
            ---path
            callback
        --实例

Node.js GET/POST请求
    -获取GET请求内容
    -获取POST请求内容

Node.js 工具模块
    -OS模块：提供基本的系统操作函数。
        --方法
            ---os.tmpdir()
            ---os.endianness()
            ---os.hostname()
            ---os.type()
            ---os.platform()
            ---os.arch()
            ---os.release()
            ---os.uptime()
            ---os.loadavg()
            ---os.totalmem()
            ---os.freemem()
            ---os.cpus()
            ---os.networkinterfaces()
        --属性
            ---os.EOL
        --实例
    -Path模块：提供处理和转换文件路的工具。
        --方法
            ---path.normalize(p)
            ---path.join([path1],[path2][,...])
            ---path.resolve([from...],to)
            ---path.isbsolute(path)
            ---path.relative(from,to)
            ---path.dirname(p)
            ---path.basename(p[,ext])
            ---path.extname(p)
            ---path.parse(path String)
            ---path.format(pathObject)
        --属性
            ---path.sep
            ---path.delimiter
            ---path.posix
            ---path.win32
        --实例
    -Net模块：用于底层的网路通信。提供了服务端和客服端的操作。
        --方法
            ----net.createServer([options][, connectionListener])
            ----net.connect(options[, connectionListener])
            ----net.createConnection(options[, connectionListener])
            ----net.connect(port[, host][, connectListener])
            ----net.createConnection(port[, host][, connectListener])
            ----net.connect(path[, connectListener])
            ----net.createConnection(path[, connectListener])
            ----net.isIP(input)
            ----net.isIPv4(input)
            ----net.isIPv6(input)
        --net.Server
            ---方法
                ----server.listen(port[, host][, backlog][, callback])
                ----server.listen(path[, callback])
                ----server.listen(handle[, callback])
                ----server.listen(options[, callback])
                ----server.close([callback])
                ----server.address()
                ----server.unref()
                ----server.getConnections(callback)
            ---事件
                ----listening
                ----connection
                ----close
                ----error
        --net.Socket
            ---方法
                ----new net.Socket([options])
                ----socket.connect(port[, host][, connectListener])
                ----socket.connect(path[, connectListener])
                ----socket.setEncoding([encoding])
                ----socket.write(data[, encoding][, callback])
                ----socket.end([data][, encoding])
                ----socket.destroy()
                ----socket.pause()
                ----socket.resume()
                ----socket.setTimeout(timeout[, callback])
                ----socket.setNoDelay([noDelay])
                ----socket.setKeepAlive([enable][, initialDelay])
                ----socket.address()
                ----socket.unref()
                ----socket.ref()
            ---事件
                ----lookup
                ----connect
                ----data
                ----end
                ----timeout
                ----drain
                ----error
                ----close
            ---属性
                ----socket.bufferSize
                ----socket.remoteAddress
                ----socket.remoteFamily
                ----socket.remotePort
                ----socket.localAddress
                ----socket.localPort
                ----socket.bytesRead
                ----socket.bytesWritten
            ---实例
    -DNS模块：用于解析域名。
        --方法
            ---dns.lookup(hostname[, options], callback)
            ---dns.lookupService(address, port, callback)
            ---dns.resolve(hostname[, rrtype], callback)
            ---dns.resolve4(hostname, callback)
            ---dns.resolve6(hostname, callback)
            ---dns.resolveMx(hostname, callback)
            ---dns.resolveTxt(hostname, callback)
            ---dns.resolveSrv(hostname, callback)
            ---dns.resolveSoa(hostname, callback)
            ---dns.resolveNs(hostname, callback)
            ---dns.resolveCname(hostname, callback)
            ---dns.reverse(ip, callback)
            ---dns.getServers()
            ---dns.setServers(servers)
        --rrtypes
        --错误码：手册
        --实例
    -Domain：简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的。
        --方法
            ---domain.run(function)
            ---domain.add(emitter)
            ---domain.remove(emitter)
            ---domain.bind(callback)
            ---domain.intercept(callback)
            ---domain.enter()
            ---domain.exit()
            ---domain.dispose()
            ---domain.create()
        --属性
            ---domain.members
        --实例

Node.js Express 框架
    -Express简介：Express是一个简洁而灵活的node.js Web应用框架，提供了一系列强大特性帮助你创建各种Web应用，和丰富的HTTP工具。
    -安装Express
    -请求和响应
        --Request对象
            ---手册
        --Response对象
            ---手册
        --路由
        --静态文件
        --GET 方法
        --POST 方法
        --文件上传
        --cookie管理

Node.js RESTful API
    -什么是REST：表述性状态传递
    -HTTP 方法
        --GET
        --PUT:用于添加数据
        --DELETE
        --POST
    -RESTful Web Services: 是一个独立的、低耦合、自包含、基于可 编程的web的应用程序，可使用开放的xml标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。
        --创建RESTful
        --添加用户
        --显示用户详情
        --删除用户

Node.js 多进程
    -exec()方法
        --语法：child_process.exec(command[,options],callback)
        --参数
            ---cammand:字符串，将要运行的命令，参数使用空格隔开
            ---options:对象，可以是：
                ----cwd：字符串，子进程的当前工作目录
                ----env：对象环境变量键值对
                ----encoding：字符串，字符编码
                ----shell：
                ----timeout：数字超时时间
                ----maxBuffer：
                ----killSignal：字符串，结束信号
                ----uid：数字，设置用户进程的ID
                ----gid：数字，设置进程组的ID
            ---callback：回调函数，包含三个参数error，stdout和stderr
        --实例
    -spawn()方法
        --语法：child_process.spawn(command[,args][,options])
        --参数
            --command
            --args
            --options Object
        实例
    -fork()方法
        --语法：child_process.fork(modulePath[,args][,options])
        --参数
            ---modulePath
            ---args: Array 字符串
            ---options
        --实例

Node.js JXcore 打包（）
    -
Node.js Web 模块
    -什么是Web服务器：网络服务器，因特网上的应用程序，功能~提供web信息浏览服务。主流三个Web服务器Apache、Nginx、IIS。
    -web应用架构
        --Client
        --Server
        --Business
        --Data
    -使用Node创建Web服务器
        --http模块
    -使用Node创建Web客户端(error)

Node.js 连接MySQL
    -安装驱动
    -连接数据库
    -数据库操作
        --增
        --删
        --改
        --查















































《七天学会NodeJS》笔记
模块

    require
        -require函数用于在当前模块中加载和使用别的模块。
    exports
        -exports对象是当前模块的导出对象，用于导出模块公有方法和属性。
    module
        -通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。
    模块初始化
        -一个模块中的js代码仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出对象。
        之后，缓存起来的导出对象被重复利用。
    主模块
        -通过命令行参数传递给NodeJS以启动程序的模块被称为主模块。主模块负责调度组成整个程序的其他模块完成工作。

    二级制模块
        -相较于前端过于困难


模块路径解析规则

    内置模块
        -如果传递给require函数的时NodeJS内置模块名称，不做路径解析，直接返回内置模块的导出对象。
    node_modules目录
        -用于存放模块的目录。
    NODE_PATH环境变量
        -与path环境变量相似，NodeJS允许使用NODE_PATH环境变量来指定额外的模块搜索路径。
包（package）
    index.js
        -当模块的文件名时index.js，加载模块时可以使用模块所在目录的路径代替模块文件的路径。
    package.json
        -如果想自定义入口模块的文件名和存放位置，就需要在包目录下包含一个package.json文件，并在其中指定入口模块的路径。

命令行程序
    Linux
    Windows
        -

工程目录

NPM
    下载第三方包
    安装命令行程序
    发布代码
    版本号
    灵机一点

开门红





